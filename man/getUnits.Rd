% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/synt.units.fcn.R
\name{getUnits}
\alias{getUnits}
\title{Extract elements from the list of all syntactc units}
\usage{
getUnits(df, colnames = c(TOKEN = "TOKEN", POSITION = "POSITION", DEP_ON =
 "DEP_ON", DEP_TYPE = "DEP_TYPE", POS = "POS.MELT", LEMMA = "LEMMA"),
 what = "all", units = c("SENTENCES", "CLAUSES", "CO_CLAUSES", "DEP_CLAUSES",
 "T_UNITS", "NOUN_PHRASES", "VERB_PHRASES"), paste.tokens = FALSE)
}
\arguments{
\item{df}{a data frame which contains a sentence in CONLL format}

\item{colnames}{a named vector containing the names of the following columns:
\itemize{
\item TOKEN: name of the column with the tokens
\item POSITION: name of column with the word index
\item DEP_ON: name of column with the dependency heads
\item DEP_TYPE: name of column with the dependency relations
\item POS: name of column with the part of speech tags
\item LEMMA: name of column with the lemmas
}}

\item{what}{one of the following character strings:
\itemize{
\item "number": returns the number identified units (integer)
\item lengths": returns the lengths of units (integer vector)
\item "tokens": returns the tokens belonging to each unit (list of character vectors)
}}

\item{units}{a vector containing the units to be extracted:
\itemize{
\item "SENTENCES": returns sentences
\item "CLAUSES": returns all clauses
\item "DEP_CLAUSES": returns all dependent clauses
\item "CO_CLAUSES": returns all coordinated clauses
\item "NOUN_PHRASES": returns all noun phrases
\item "VERB_PHRASES": returns all verb phrases
}}

\item{paste.tokens}{a logical value indicating whether tokens be pasted
together}
}
\value{
If \code{what} is "all" (the default) then the full output of \code{synt.units.fcn}
will be returned as a list.

If \code{what} is "number" then the number of identified units will be returned as
a named vector.

If \code{what} is "lengths" then the lengths of the identified units will be
returned as a list of integer vectors.

If \code{what} is "tokens" then the tokens belonging to each unit will be returned
as a list of character vectors.
}
\description{
This function is a wrapper function for \code{synt.units.fcn}
}
\examples{

#`example`is a csv containing a sentence in CONLL format
data(example)

#Run function (full analysis)
getUnits(example)

#get counts of units
getUnits(example, what = "number")

#get lengths of units
getUnits(example, what = "lengths")

#get tokens
getUnits(example, what = "tokens")

#get tokens of a specific unit only
getUnits(example, what = "tokens", unit = c("NOUN_PHRASES"))

#get tokens of a specific unit only and paste them together
getUnits(example, what = "tokens", unit = c("NOUN_PHRASES"), paste.tokens = TRUE)


}
